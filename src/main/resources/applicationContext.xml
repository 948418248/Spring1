<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	
	<!-- Spring创建对象 -->
	<!-- 1.通过构造器创建对象
		class：要创建的对象的类型。 -->
	<bean class="java.util.ArrayList" id="obj1"></bean>
	
	<!-- 2.通过静态工厂方法创建对象 
		调用某类的静态方法来创建对象。
		class:要调用的类。
		factory-method:要调用的静态方法。-->
	<bean class="java.util.Calendar" factory-method="getInstance" id="obj2">
	</bean>
	
	
	<!-- 3.通过实例工厂方法创建对象 
		调用某对象的非静态方法来创建对象。
		factory-bean:要调用的对象的名称(id)
			此处必须引用容器中已经声明的对象.
		factory-method:要调用的方法
		注意，所创建对象的类型是方法返回的类型。	-->
	<bean factory-bean="obj2" factory-method="getTime" id="obj3"></bean>
	
	<!-- bean的作用域：
		singleton:Spring创建的某个内心的bean，
			在容器中只有一个实例，即单列，默认是这样。
		prototype:Spring创建的某个类型的bean，
			在容器中有多个实例。 -->
	<bean class="java.util.HashMap" id="obj4" scope="prototype"></bean>
	
	<!-- 管理bean的生命周期：
		放Spring自动调用该bean的初始化及销毁方法 。
		inint-method:声明初始化方法，在容器创建bean之后自动调用。
		destroy-method：声明销毁方法，在容器关闭时自动调用。只对单列的bean有效。
		lazy-init:延迟初始化，即在容器创建是并不创建bean，而是在获取bean
			时才创建，将bean创建的时机推迟了，只对单列的bean有效。-->
	
	<bean class="bean.Example" id="exa" init-method="init"
		destroy-method="destroy" scope="singleton" lazy-init="true">
	</bean>
	
	<!-- Spring IOC是由依赖注入(DI)实现的，
		它包括2中注入方式：setter注入、构造器注入 -->
		
	<!-- 1.setter注入：通过bean的set方法，给它注入参数。 -->
	<bean class="bean.Computer" id="Computer">
		<property name="mainboard" value="技嘉"/>
		<property name="hdd" value="希捷"/>
		<property name="ram" value="金士杰"/>
	</bean>
	
	<!-- 2.构造器注入：通过bean的构造器，给它注入参数，这种注入方式比setter更严格，
		往往是为了强制注入这些参数。 -->
	<bean class="bean.MobilePhone" id="phone">
		<constructor-arg index="0" value="ARM"/>
		<constructor-arg index="1" value="2G"/>
	</bean>
	
	<!-- 自动装备：Spring在创建bean时，可以根据
		类型或名称，从容器中找到匹配的bean，设置
		给这个bean的属性。 -->
	<bean class="bean.Student" id="student" autowire="byType"></bean>

	<!-- 参数值注入 -->
	<bean class="bean.Message" id="msg">
		<!-- 注入基本值：基本类型、
			封装类型和String类型。 -->
		<property name="id" value="1"/>
		<property name="name" value="zhangsan"/>
		<property name="salary" value="5000"/>
		<!-- 注入bean对象 
			name:要注入的属性的名称；
			ref：注入的bean的id。-->
		<property name="phone" ref="phone"/>
		<!-- 注入集合：List、Set、Map、Properties -->
		<property name="cities">
			<list>
				<value>北京</value>
				<value>上海</value>
				<value>广州</value>
			</list>
		</property>
		<property name="score">
			<map>
				<entry key="jsd1604" value="80"/>
				<entry key="jsd1605" value="30"/>
			</map>
		</property>
		<property name="params"> 
			<props>
				<prop key="user">system</prop>
				<prop key="pwd">oracle</prop>
			</props>
		</property>
	</bean>

</beans>